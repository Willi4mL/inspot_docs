!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).ESRGANLegacyPSNRSmall=t()}(this,function(){"use strict";const r=e=>{return Array.isArray(e)?e[0]:e};var[e,t,a="rdn"]=[2,"psnr-small"],{scale:n,name:e,version:t,meta:{architecture:a,...s},path:l}={scale:e,path:`models/${t}/model.json`,name:"@upscalerjs/esrgan-legacy",version:"1.0.0-beta.14",meta:{dataset:"div2k",architecture:a}};return l=l||`models/x${n}/model.json`,"rdn"===a?{scale:n,modelType:"layers",_internals:{path:l,name:e,version:t},meta:{architecture:a,...s},inputRange:[0,255],outputRange:[0,255]}:{setup:a=>{const s=a.layers.Layer;class e extends s{beta;constructor(){super({}),this.beta=.2}call(e){return a.mul(r(e),this.beta)}static className="MultiplyBeta"}[e,(e=>{class t extends s{scale=e;constructor(){super({})}computeOutputShape(e){return[e[0],e[1],e[2],3]}call(e){return a.depthToSpace(r(e),this.scale,"NHWC")}static className=`PixelShuffle${n}x`}return t})(n)].forEach(e=>{a.serialization.registerClass(e)})},scale:n,modelType:"layers",_internals:{path:l,name:e,version:t},meta:{architecture:a,...s},inputRange:[0,1],outputRange:[0,1]}});